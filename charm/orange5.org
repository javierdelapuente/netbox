* Machine preparation
** Host machine
Installed 24.04 from https://github.com/Joshua-Riek/ubuntu-rockchip.
Should also work with 22.04 or with armbian, but I have not tested it.


** Multipass/VM
To run VMs there is an issue with qemu (see https://github.com/Joshua-Riek/ubuntu-rockchip/issues/731),
you will need to disable some cpus, like sudo ~chcpu --disable 0,1,2,3~

After that, you can create the VM with
~multipass launch 22.04 --cpus 4 --memory 8G --disk 100G~

** LXD container

Use the profile in https://microk8s.io/docs/install-lxd. You may need to remove the netlink_diag kernel
module.

Create the container with ~lxc launch -p default -p microk8s ubuntu:22.04 netbox~.

After rebooting, you may need to run ~apparmor_parser -r /var/lib/snapd/apparmor/profiles/*~. If
necessary, put that line into the =rc.local= file.


* Base installation

** MicroK8S
#+begin_src
  sudo snap install microk8s --channel=1.30-strict/stable
  sudo usermod -a -G snap_microk8s ubuntu
  newgrp  snap_microk8s
  sudo microk8s.enable registry storage ingress
  IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
  sudo microk8s enable metallb:$IPADDR-$IPADDR

  mkdir $HOME/.kube
  microk8s config | sudo -u ubuntu tee /home/ubuntu/.kube/config > /dev/null
  sudo snap alias microk8s.kubectl kubectl
#+end_src

** Juju

#+begin_src
  sudo snap install juju --channel=3.5/stable
  mkdir -p $HOME/.local/share/juju
  juju bootstrap microk8s microk8s
#+end_src

** Netbox


#+begin_src
  juju add-model netbox
  juju model-config update-status-hook-interval=100s
  juju model-config "logging-config=<root>=INFO;unit=DEBUG"
  # With this, the "--constraints "arch=arm64" in juju deploy may not be necessary
  juju set-model-constraints arch=arm64
#+end_src

*** PostgreSQL
#+begin_src
  juju deploy postgresql-k8s --channel 14/edge --trust
#+end_src

*** TODO Redis
*** TODO Mongo and s3-integrator
*** TODO Traefik
*** TODO NetBox
